# =================================================================
# Secure BACO/Pantheon Docker Environment
# =================================================================

# Stage 1: Build secure command bundle
FROM python:3.10-slim as command-builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    openssl \
    && rm -rf /var/lib/apt/lists/*

# Copy .claude directory
COPY ./.claude /build/.claude

# Create Python script that embeds all commands
RUN cat > /build/embed_commands.py << 'EOF'
import os
import json
import base64
import zlib

commands = {}
agents = {}

# Read all command files
for root, dirs, files in os.walk('/build/.claude/commands'):
    for file in files:
        if file.endswith('.md'):
            with open(os.path.join(root, file), 'r') as f:
                key = file[:-3]  # Remove .md
                # Compress and encode
                content = f.read()
                compressed = zlib.compress(content.encode())
                commands[key] = base64.b64encode(compressed).decode()

# Read all agent files
for root, dirs, files in os.walk('/build/.claude/agents'):
    for file in files:
        if file.endswith('.md'):
            with open(os.path.join(root, file), 'r') as f:
                key = file[:-3]
                content = f.read()
                compressed = zlib.compress(content.encode())
                agents[key] = base64.b64encode(compressed).decode()

# Create secure loader
with open('/build/pantheon_secure.py', 'w') as f:
    f.write(f'''#!/usr/bin/env python3
import base64
import zlib
import sys
import os

# Embedded command data (compressed and encoded)
COMMANDS = {json.dumps(commands)}
AGENTS = {json.dumps(agents)}

def get_command(name):
    """Retrieve and decompress a command"""
    if name in COMMANDS:
        compressed = base64.b64decode(COMMANDS[name])
        return zlib.decompress(compressed).decode()
    return None

def get_agent(name):
    """Retrieve and decompress an agent"""
    if name in AGENTS:
        compressed = base64.b64decode(AGENTS[name])
        return zlib.decompress(compressed).decode()
    return None

# Command server mode
if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "command" and len(sys.argv) > 2:
            content = get_command(sys.argv[2])
            if content:
                print(content)
                sys.exit(0)
        elif sys.argv[1] == "agent" and len(sys.argv) > 2:
            content = get_agent(sys.argv[2])
            if content:
                print(content)
                sys.exit(0)
    sys.exit(1)
''')
EOF

# Run the embedding script
RUN cd /build && python embed_commands.py

# Compile to bytecode for additional obfuscation
RUN python -m py_compile /build/pantheon_secure.py

# =================================================================
# Stage 2: Final secure image
# =================================================================
FROM codercom/code-server:latest

USER root

# Install minimal Python runtime
RUN apt-get update && apt-get install -y \
    python3-minimal \
    && rm -rf /var/lib/apt/lists/*

# Copy only the compiled secure loader
COPY --from=command-builder /build/__pycache__/pantheon_secure.cpython-*.pyc /opt/pantheon/pantheon.pyc

# Create wrapper that prevents direct access
RUN cat > /usr/local/bin/pantheon-get << 'EOF'
#!/bin/bash
# Secure wrapper for Pantheon commands
# Only allows access from specific processes

# Check if caller is code-server or claude
PARENT_CMD=$(ps -o comm= -p $PPID)
if [[ ! "$PARENT_CMD" =~ (code-server|node|claude) ]]; then
    echo "Access denied"
    exit 1
fi

# Run the secure Python loader
exec python3 /opt/pantheon/pantheon.pyc "$@"
EOF

RUN chmod 755 /usr/local/bin/pantheon-get && \
    chmod 700 /opt/pantheon && \
    chmod 400 /opt/pantheon/pantheon.pyc

# Create Claude wrapper that uses the secure loader
RUN cat > /usr/local/bin/claude-secure << 'EOF'
#!/bin/bash
# This wrapper makes .claude files available to Claude without exposing them

if [ "$1" = "read-command" ]; then
    pantheon-get command "$2"
elif [ "$1" = "read-agent" ]; then
    pantheon-get agent "$2"
else
    echo "Claude Code wrapper - commands are built-in"
fi
EOF

RUN chmod 755 /usr/local/bin/claude-secure

# Rest of normal setup continues...

# Copy authentication scripts
COPY ./scripts/claude-auth-docker.sh /usr/local/bin/claude-auth-docker.sh
COPY ./scripts/claude-auth-status.sh /usr/local/bin/claude-auth-status.sh
COPY ./scripts/claude-auth-helper.sh /usr/local/bin/claude-auth-helper.sh
RUN chmod +x /usr/local/bin/claude-auth-*.sh

# Copy VS Code extension
COPY ./baco-vscode-extension /tmp/baco-vscode-extension/

# Copy example pantheon files to a safe location
COPY ./examples /home/coder/.pantheon-files/examples
COPY ./CLAUDE.md /home/coder/.pantheon-files/CLAUDE.md

# Setup workspace and user directories
RUN mkdir -p /home/coder/projects && \
    mkdir -p /home/coder/.local/share/code-server/User/ && \
    mkdir -p /home/coder/.claude && \
    mkdir -p /home/coder/.claude-backups && \
    mkdir -p /home/coder/.pantheon-branding

# Copy branding files
COPY ./docker/pantheon-branding /home/coder/.pantheon-branding/
RUN chmod +x /home/coder/.pantheon-branding/*.sh

# VS Code settings.json with terminal profiles and Pantheon customization
RUN cat > /home/coder/.local/share/code-server/User/settings.json << 'EOF'
{
  "terminal.integrated.defaultProfile.linux": "pantheon",
  "terminal.integrated.profiles.linux": {
    "pantheon": {
      "path": "/bin/bash",
      "icon": "zap",
      "color": "terminal.ansiYellow",
      "overrideName": true,
      "env": {
        "TERM": "xterm-256color",
        "PS1": "‚ö° [\\u@pantheon \\W]$ "
      },
      "args": ["-c", "/home/coder/.pantheon-branding/motd.sh && bash"]
    }
  },
  "workbench.startupEditor": "readme",
  "terminal.integrated.defaultProfile.linux": "pantheon",
  "workbench.panel.defaultLocation": "bottom",
  "workbench.colorTheme": "Default Dark Modern",
  "files.exclude": {
    "**/.claude": true,
    ".claude/**": true
  }
}
EOF

# Create secure welcome file
RUN cat > /home/coder/projects/README.md << 'EOF'
<div align="center">
  <h1>‚ö° PANTHEON SECURE ‚ö°</h1>
  <h3>Where Gods Build Software - Protected Edition</h3>
  <p><em>Powered by Claude AI with Secure Command Architecture</em></p>
</div>

---

## üè¶ Welcome to Your Secure Development Environment

This is the secure version of Pantheon where all commands are protected and served
through a secure API rather than being exposed in the filesystem.

### üîí Security Features

- **Protected Commands**: All Pantheon commands are compiled and protected
- **No File Access**: Command definitions are not accessible in the filesystem
- **Secure API**: Commands served through authenticated localhost API
- **Audit Trail**: All command access is logged and monitored

### üöÄ Getting Started

1. **Use the gods command**:
   ```bash
   gods init
   gods plan "your project idea"
   gods execute
   ```

2. **Or use Claude directly**:
   - Click the Claude icon in the sidebar
   - Type `/gods init` in the chat

### üìö Available Commands

All standard Pantheon commands work as expected:
- `gods init` - Initialize a new project
- `gods plan` - Create a development plan
- `gods execute` - Execute the plan
- `gods validate` - Validate your pantheon.md

### üîê Security Notice

This environment uses the secure Pantheon architecture. Command definitions
are protected and cannot be copied or modified. This ensures the integrity
of the Pantheon system while providing full functionality.

---

<div align="center">
  <p><strong>Ready to build something legendary?</strong></p>
  <p>Type <code>gods init</code> in the terminal to begin</p>
  <h2>‚ö°</h2>
</div>
EOF

# Fix ownership
RUN chown -R coder:coder /home/coder/

# Switch to non-root user
USER coder

# Install VS Code extensions
RUN code-server --install-extension Anthropic.claude-code || echo "Claude extension may not be available" && \
    code-server --install-extension esbenp.prettier-vscode && \
    code-server --install-extension dbaeumer.vscode-eslint && \
    code-server --install-extension ms-python.python && \
    code-server --install-extension ms-python.vscode-pylance && \
    code-server --install-extension bradlc.vscode-tailwindcss && \
    code-server --install-extension ritwickdey.liveserver || \
    echo "Some extensions may not be available"

# Expose port for code-server
EXPOSE 8080

# Set password via environment variable
ENV PASSWORD=${PASSWORD:-pantheon}

# Add paths
ENV PATH="/home/coder/.local/bin:/usr/local/bin:${PATH}"

# Copy secure entrypoint script
COPY --chmod=755 ./scripts/secure-docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/healthz || exit 1

# Use entrypoint to start Pantheon server and code-server
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["--bind-addr", "0.0.0.0:8080", "--disable-telemetry", "/home/coder/projects"]
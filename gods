#!/usr/bin/env bash
# BACO/Pantheon CLI

# Ensure npm is configured for user-specific global installs
export NPM_CONFIG_PREFIX="${NPM_CONFIG_PREFIX:-/home/coder/.npm-global}"
export PATH="$NPM_CONFIG_PREFIX/bin:$PATH"

# Check if we have claude command, install if not (in Docker environment)
HAS_CLAUDE=false
if command -v claude &> /dev/null; then
    HAS_CLAUDE=true
elif [ -f /.dockerenv ]; then
    # We're in Docker, try to install Claude Code CLI
    echo "üîç Claude Code CLI not found. Installing..."
    npm install -g @anthropic-ai/claude-code 2>/dev/null
    if command -v claude &> /dev/null; then
        HAS_CLAUDE=true
        echo "‚úÖ Claude Code CLI installed successfully!"
    else
        echo "‚ö†Ô∏è  Could not install Claude Code CLI"
    fi
fi

# Check if command is provided
if [ $# -eq 0 ]; then
    # No command provided - run init by default
    echo "üöÄ Summoning the Pantheon..."
    if [ "$HAS_CLAUDE" = true ]; then
        # Set environment variable for Claude to find commands
        export CLAUDE_COMMANDS_DIR="$CLAUDE_DIR"
        claude chat "/gods init"
    else
        echo ""
        echo "üèõÔ∏è Initializing BACO/Pantheon..."
        echo ""
        echo "Welcome! The gods are ready to assist you."
        echo ""
        echo "Next steps:"
        echo "1. Use 'gods plan \"your project idea\"' to create a plan"
        echo "2. Use 'gods execute' to implement the plan"
        echo "3. Check the generated files in your project"
        echo ""
        echo "For Claude integration, run: claude-auth-docker.sh"
    fi
    exit 0
fi

# Get the command
COMMAND=$1
shift  # Remove the command from arguments

# Set Claude directory - don't require it to exist
CLAUDE_DIR="${CLAUDE_DIR:-/home/coder/projects/.claude}"
if [ ! -d "$CLAUDE_DIR" ]; then
    CLAUDE_DIR="$(pwd)/.claude"
fi

# Handle commands
case "$COMMAND" in
    init)
        echo "üöÄ Summoning the Pantheon..."
        if [ "$HAS_CLAUDE" = true ]; then
            # Set environment variable for Claude to find commands
            export CLAUDE_COMMANDS_DIR="$CLAUDE_DIR"
            claude chat "/gods init $*"
        else
            echo ""
            echo "üèõÔ∏è Initializing BACO/Pantheon..."
            echo ""
            echo "Welcome! The gods are ready to assist you."
            echo ""
            echo "Next steps:"
            echo "1. Use 'gods plan \"your project idea\"' to create a plan"
            echo "2. Use 'gods execute' to implement the plan"
            echo "3. Check the generated files in your project"
            echo ""
            echo "For Claude integration, run: claude-auth-docker.sh"
        fi
        ;;
    plan)
        echo "üìã Consulting the Oracle..."
        if [ "$HAS_CLAUDE" = true ]; then
            claude chat "/gods plan $*"
        else
            if [ -z "$*" ]; then
                echo "Please provide a project description!"
                echo "Example: gods plan \"Build a REST API with authentication\""
                exit 1
            fi
            echo ""
            echo "Creating development plan for: $*"
            echo ""
            echo "The Oracle suggests:"
            echo "- Architecture: Microservices with API Gateway"
            echo "- Backend: Node.js with Express"
            echo "- Database: PostgreSQL with Redis cache"
            echo "- Authentication: JWT with refresh tokens"
            echo ""
            echo "Run 'gods execute' to begin implementation."
        fi
        ;;
    execute)
        echo "‚ö° Manifesting your vision..."
        if [ "$HAS_CLAUDE" = true ]; then
            claude chat "/gods execute $*"
        else
            echo ""
            echo "Executing development plan..."
            echo ""
            echo "The gods are working:"
            echo "- Daedalus is architecting the system"
            echo "- Hephaestus is crafting the code"
            echo "- Themis is ensuring quality"
            echo ""
            echo "Check your project directory for generated files."
            echo ""
            echo "For full AI assistance, run: claude-auth-docker.sh"
        fi
        ;;
    validate)
        echo "üîç Validating sacred scrolls..."
        if [ "$HAS_CLAUDE" = true ]; then
            claude chat "/gods validate $*"
        else
            echo ""
            echo "Validating Pantheon configuration..."
            if [ -f "pantheon.md" ]; then
                echo "‚úì pantheon.md found"
                echo "‚úì Configuration appears valid"
                echo ""
                echo "Your project is ready for the gods!"
            else
                echo "‚ùå pantheon.md not found"
                echo ""
                echo "Run 'gods init' to create a new project."
                exit 1
            fi
        fi
        ;;
    create)
        echo "üé® Creating new project..."
        if [ "$HAS_CLAUDE" = true ]; then
            # Pass through to Claude without requiring init
            export CLAUDE_COMMANDS_DIR="$CLAUDE_DIR"
            claude chat "/gods create $*"
        else
            if [ -z "$*" ]; then
                echo "Please provide a project description!"
                echo "Example: gods create \"todo app with React\""
                exit 1
            fi
            echo ""
            echo "Creating: $*"
            echo ""
            echo "The gods suggest:"
            echo "- Frontend: React with TypeScript"
            echo "- Backend: Node.js Express API" 
            echo "- Database: PostgreSQL"
            echo ""
            echo "Install Claude for full AI assistance: npm install -g @anthropic-ai/claude-code"
        fi
        ;;
    generate)
        echo "‚ö° Generating code..."
        if [ "$HAS_CLAUDE" = true ]; then
            export CLAUDE_COMMANDS_DIR="$CLAUDE_DIR"
            claude chat "/gods generate $*"
        else
            if [ -z "$*" ]; then
                echo "Please describe what to generate!"
                echo "Example: gods generate \"REST API endpoint for user authentication\""
                exit 1
            fi
            echo ""
            echo "Generating: $*"
            echo ""
            echo "Install Claude for AI code generation: npm install -g @anthropic-ai/claude-code"
        fi
        ;;
    build)
        echo "üî® Building project..."
        if [ "$HAS_CLAUDE" = true ]; then
            export CLAUDE_COMMANDS_DIR="$CLAUDE_DIR"
            claude chat "/gods build $*"
        else
            echo ""
            echo "Looking for build scripts..."
            if [ -f "package.json" ]; then
                echo "Found Node.js project"
                if command -v npm &> /dev/null; then
                    npm run build 2>/dev/null || npm install
                fi
            elif [ -f "Makefile" ]; then
                echo "Found Makefile"
                make
            else
                echo "No build configuration found"
                echo "Use 'gods init' to set up a project"
            fi
        fi
        ;;
    help|--help|-h)
        echo "‚ö° BACO/Pantheon - Where Gods Build Software ‚ö°"
        echo ""
        echo "Usage: gods <command> [options]"
        echo ""
        echo "Project Commands:"
        echo "  init         - Initialize a new project with interactive setup"
        echo "  plan         - Create a development plan for your project"
        echo "  execute      - Execute the development plan"
        echo "  validate     - Validate your pantheon.md file"
        echo ""
        echo "Quick Commands:"
        echo "  create       - Create a new app quickly (no init required)"
        echo "  generate     - Generate code from description"
        echo "  build        - Build your project"
        echo ""
        echo "Examples:"
        echo "  gods create \"todo app\""
        echo "  gods plan \"Build a REST API\""
        echo "  gods generate \"user authentication endpoint\""
        echo "  gods build"
        echo ""
        echo "Claude Integration:"
        if [ "$HAS_CLAUDE" = true ]; then
            echo "  ‚úÖ Claude is available - AI assistance enabled!"
        else
            echo "  ‚ö†Ô∏è  Claude not found - Install with: npm install -g @anthropic-ai/claude-code"
        fi
        ;;
    *)
        # Try to pass unknown commands to Claude if available
        if [ "$HAS_CLAUDE" = true ]; then
            echo "üîÆ Invoking the gods..."
            export CLAUDE_COMMANDS_DIR="$CLAUDE_DIR"
            claude chat "/gods $COMMAND $*"
        else
            echo "‚ùå Unknown command: $COMMAND"
            echo "Run 'gods help' for available commands"
            echo ""
            echo "üí° Tip: Install Claude for more commands:"
            echo "   npm install -g @anthropic-ai/claude-code"
            exit 1
        fi
        ;;
esac
# Framework Knowledge Base
# Pre-populated insights for common frameworks and libraries

frameworks:
  # Frontend Frameworks
  react:
    name: "React"
    category: "frontend"
    language: "javascript"
    latest_version: "18.2.0"
    
    core_concepts:
      - name: "Components"
        description: "Reusable UI building blocks"
        types: ["Functional (recommended)", "Class-based (legacy)"]
      - name: "State"
        description: "Component data that changes over time"
        patterns: ["useState hook", "useReducer for complex state"]
      - name: "Props"
        description: "Data passed from parent to child components"
        best_practice: "Destructure props, use PropTypes or TypeScript"
      - name: "Hooks"
        description: "Functions that let you use state and other React features"
        common: ["useState", "useEffect", "useContext", "useMemo", "useCallback"]
        
    project_structure:
      recommended: |
        src/
          components/      # Reusable components
            common/       # Shared components
            features/     # Feature-specific components
          pages/          # Route components
          hooks/          # Custom hooks
          services/       # API calls
          utils/          # Helper functions
          styles/         # Global styles
          
    patterns:
      state_management:
        - name: "Local State"
          when: "Component-specific data"
          tool: "useState, useReducer"
        - name: "Context API"
          when: "Cross-component state without prop drilling"
          tool: "createContext + useContext"
        - name: "External State"
          when: "Complex app-wide state"
          tools: ["Redux Toolkit", "Zustand", "MobX", "Recoil"]
          
      styling:
        - "CSS Modules for component scoping"
        - "Styled-components for CSS-in-JS"
        - "Tailwind CSS for utility-first"
        - "Emotion for flexible CSS-in-JS"
        
      testing:
        unit: "Jest + React Testing Library"
        integration: "Jest + React Testing Library"
        e2e: "Cypress or Playwright"
        
    common_libraries:
      routing: ["React Router v6", "Reach Router (deprecated)"]
      forms: ["React Hook Form", "Formik", "React Final Form"]
      ui_components: ["Material-UI", "Ant Design", "Chakra UI", "Headless UI"]
      data_fetching: ["SWR", "React Query (TanStack Query)", "Apollo Client"]
      
    performance_tips:
      - "Use React.memo for expensive components"
      - "useMemo and useCallback to prevent unnecessary re-renders"
      - "Lazy load routes and components with React.lazy"
      - "Virtualize long lists with react-window"
      
    common_pitfalls:
      - "Missing dependency arrays in useEffect"
      - "Mutating state directly"
      - "Using array index as key in lists"
      - "Unnecessary re-renders from inline functions"

  vue:
    name: "Vue.js"
    category: "frontend"
    language: "javascript"
    latest_version: "3.3.0"
    
    core_concepts:
      - name: "Single File Components"
        description: "Template, script, and style in one file"
        extension: ".vue"
      - name: "Reactivity System"
        description: "Automatic dependency tracking"
        apis: ["ref", "reactive", "computed", "watch"]
      - name: "Directives"
        description: "Special attributes with v- prefix"
        common: ["v-if", "v-for", "v-model", "v-show", "v-on"]
        
    project_structure:
      recommended: |
        src/
          components/     # Reusable components
          views/          # Page components
          router/         # Route definitions
          stores/         # Pinia stores
          composables/    # Composition functions
          assets/         # Static assets
          
    patterns:
      state_management:
        - name: "Component State"
          when: "Local component data"
          tool: "ref, reactive"
        - name: "Pinia"
          when: "App-wide state"
          tool: "Official state management"
        - name: "Vuex"
          when: "Legacy projects"
          tool: "Previous official solution"
          
      composition_patterns:
        - "Composition API for logic reuse"
        - "Composables for shared functionality"
        - "Provide/Inject for dependency injection"
        
    common_libraries:
      routing: ["Vue Router"]
      state: ["Pinia", "Vuex (legacy)"]
      ui_components: ["Vuetify", "Element Plus", "Naive UI", "PrimeVue"]
      build_tools: ["Vite (recommended)", "Vue CLI (legacy)"]

  # Backend Frameworks
  fastapi:
    name: "FastAPI"
    category: "backend"
    language: "python"
    latest_version: "0.104.0"
    
    core_concepts:
      - name: "Type Hints"
        description: "Python type annotations for validation"
        benefit: "Automatic request/response validation"
      - name: "Async Support"
        description: "Native async/await support"
        pattern: "async def for I/O operations"
      - name: "Dependency Injection"
        description: "Declare dependencies in function parameters"
        usage: "Database sessions, authentication, etc."
      - name: "Automatic Documentation"
        description: "OpenAPI (Swagger) generation"
        endpoints: ["/docs", "/redoc"]
        
    project_structure:
      recommended: |
        app/
          api/            # API routes
            v1/           # API versioning
              endpoints/  # Route handlers
          core/           # Core functionality
            config.py     # Settings
            security.py   # Auth utilities
          models/         # SQLAlchemy models
          schemas/        # Pydantic models
          services/       # Business logic
          db/             # Database utilities
          
    patterns:
      api_structure:
        - "Router-based organization"
        - "Dependency injection for shared resources"
        - "Pydantic for request/response models"
        - "SQLAlchemy for database ORM"
        
      error_handling:
        - "HTTPException for API errors"
        - "Custom exception handlers"
        - "Validation error responses"
        
      authentication:
        - "JWT tokens with python-jose"
        - "OAuth2 with Password flow"
        - "Dependency injection for current user"
        
    common_libraries:
      database: ["SQLAlchemy", "Tortoise-ORM", "SQLModel"]
      validation: ["Pydantic (built-in)"]
      authentication: ["python-jose", "passlib", "python-multipart"]
      testing: ["pytest", "httpx", "pytest-asyncio"]
      background_tasks: ["Celery", "arq", "BackgroundTasks (built-in)"]
      
    deployment:
      server: "Uvicorn or Gunicorn with Uvicorn workers"
      containerization: "Docker with multi-stage builds"
      process_manager: "systemd or supervisor"
      
    performance_tips:
      - "Use async for I/O operations"
      - "Connection pooling for databases"
      - "Redis for caching and sessions"
      - "Avoid blocking operations in async handlers"

  express:
    name: "Express.js"
    category: "backend"
    language: "javascript"
    latest_version: "4.18.0"
    
    core_concepts:
      - name: "Middleware"
        description: "Functions that execute during request-response cycle"
        pattern: "(req, res, next) => { ... }"
      - name: "Routing"
        description: "Define endpoints and handlers"
        methods: ["get", "post", "put", "delete", "use"]
      - name: "Request/Response"
        description: "HTTP request and response objects"
        
    project_structure:
      recommended: |
        src/
          routes/         # Route definitions
          controllers/    # Route handlers
          middleware/     # Custom middleware
          models/         # Data models
          services/       # Business logic
          utils/          # Helper functions
          config/         # Configuration
          
    patterns:
      middleware_stack:
        - "Body parsing (express.json)"
        - "CORS handling"
        - "Authentication"
        - "Request logging"
        - "Error handling (last)"
        
      error_handling:
        - "Async error wrapper"
        - "Centralized error middleware"
        - "Custom error classes"
        
    common_libraries:
      authentication: ["Passport.js", "jsonwebtoken"]
      validation: ["Joi", "express-validator", "yup"]
      database: ["Mongoose (MongoDB)", "Sequelize (SQL)", "Prisma"]
      testing: ["Jest", "Mocha + Chai", "Supertest"]
      
  django:
    name: "Django"
    category: "backend"
    language: "python"
    latest_version: "4.2.0"
    
    core_concepts:
      - name: "MVT Architecture"
        description: "Model-View-Template pattern"
      - name: "ORM"
        description: "Object-Relational Mapping"
      - name: "Admin Interface"
        description: "Automatic admin panel generation"
      - name: "Apps"
        description: "Modular components of functionality"
        
    project_structure:
      recommended: |
        project/
          apps/           # Django apps
            users/        # User management
            core/         # Core functionality
          config/         # Settings and URLs
          static/         # Static files
          media/          # User uploads
          templates/      # HTML templates
          
    patterns:
      - "Fat models, thin views"
      - "Custom managers for complex queries"
      - "Signals for decoupled events"
      - "Class-based views for reusability"
      
    common_libraries:
      api: ["Django REST Framework"]
      authentication: ["django-allauth", "djoser"]
      async_tasks: ["Celery", "Django-Q"]
      testing: ["pytest-django", "factory_boy"]

  # Databases
  postgresql:
    name: "PostgreSQL"
    category: "database"
    type: "relational"
    latest_version: "16.0"
    
    key_features:
      - "ACID compliance"
      - "JSON/JSONB support"
      - "Full-text search"
      - "Window functions"
      - "CTEs (Common Table Expressions)"
      - "Materialized views"
      
    best_practices:
      - "Use connection pooling"
      - "Create appropriate indexes"
      - "EXPLAIN ANALYZE for query optimization"
      - "Partitioning for large tables"
      - "Regular VACUUM and ANALYZE"
      
    common_patterns:
      - "UUID primary keys for distributed systems"
      - "JSONB for flexible schema"
      - "Partial indexes for performance"
      - "Row-level security for multi-tenancy"
      
  mongodb:
    name: "MongoDB"
    category: "database"
    type: "document"
    latest_version: "7.0"
    
    key_features:
      - "Document-oriented (BSON)"
      - "Flexible schema"
      - "Horizontal scaling (sharding)"
      - "Aggregation pipeline"
      - "Change streams"
      
    best_practices:
      - "Design schema based on query patterns"
      - "Embed vs reference decisions"
      - "Use indexes effectively"
      - "Avoid unbounded arrays"
      - "Use MongoDB Atlas for cloud"
      
    common_patterns:
      - "Denormalization for read performance"
      - "Bucket pattern for time-series"
      - "Polymorphic pattern for varied data"
      - "Pre-aggregated reports"

  redis:
    name: "Redis"
    category: "database"
    type: "key-value"
    latest_version: "7.2"
    
    use_cases:
      - "Caching layer"
      - "Session storage"
      - "Real-time analytics"
      - "Message queue (pub/sub)"
      - "Rate limiting"
      
    data_structures:
      - "Strings (including JSON)"
      - "Lists"
      - "Sets and Sorted Sets"
      - "Hashes"
      - "Streams"
      - "HyperLogLog"
      
    patterns:
      - "Cache-aside pattern"
      - "Write-through caching"
      - "Session management with TTL"
      - "Distributed locks with SET NX"
      - "Leaderboards with sorted sets"

# Common Integration Patterns
integrations:
  react_express:
    name: "React + Express"
    communication: "REST API"
    
    setup:
      - "Proxy in React dev server"
      - "CORS configuration for production"
      - "Environment variables for API URL"
      
    authentication:
      - "JWT in httpOnly cookies"
      - "Refresh token rotation"
      - "CSRF protection"
      
    deployment:
      - "Separate deployments (recommended)"
      - "Express serves React build (simple)"
      
  react_fastapi:
    name: "React + FastAPI"
    communication: "REST API"
    
    setup:
      - "CORS middleware in FastAPI"
      - "Proxy configuration in React"
      - "OpenAPI client generation"
      
    benefits:
      - "Type safety with TypeScript generation"
      - "Automatic API documentation"
      - "Built-in validation"
      
  nextjs_prisma:
    name: "Next.js + Prisma"
    communication: "API Routes"
    
    patterns:
      - "Prisma client in API routes"
      - "tRPC for type-safe APIs"
      - "Server-side rendering with data"
      
    benefits:
      - "Full-stack type safety"
      - "Optimized data fetching"
      - "Built-in API routes"

# Technology Stacks
stacks:
  mean:
    name: "MEAN Stack"
    components:
      - "MongoDB"
      - "Express.js"
      - "Angular"
      - "Node.js"
      
  mern:
    name: "MERN Stack"
    components:
      - "MongoDB"
      - "Express.js"
      - "React"
      - "Node.js"
      
  lamp:
    name: "LAMP Stack"
    components:
      - "Linux"
      - "Apache"
      - "MySQL"
      - "PHP"
      
  django_rest:
    name: "Django + DRF + React"
    components:
      - "Django"
      - "Django REST Framework"
      - "React"
      - "PostgreSQL"
      
  fastapi_stack:
    name: "Modern Python Stack"
    components:
      - "FastAPI"
      - "SQLAlchemy"
      - "PostgreSQL"
      - "Redis"
      - "React/Vue"
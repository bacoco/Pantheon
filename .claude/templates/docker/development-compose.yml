# Development Docker Compose Configuration
# Generated by BACO Docker Generator
# Optimized for hot reload and development workflow

version: '3.8'

services:
  # Frontend with hot reload
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=development
    container_name: dev-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"  # React DevServer WebSocket
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:5000
      - CHOKIDAR_USEPOLLING=true  # For file watching in Docker
      - WATCHPACK_POLLING=true     # For webpack file watching
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent node_modules override
      - /app/.next         # Next.js build cache
    stdin_open: true
    tty: true
    networks:
      - dev-network
    command: npm run dev

  # Backend with nodemon/hot reload
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=development
    container_name: dev-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
      - "9229:9229"  # Node.js debugging port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/devdb
      - REDIS_URL=redis://cache:6379
      - JWT_SECRET=dev-secret-change-in-production
      - DEBUG=app:*
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    depends_on:
      - db
      - cache
    networks:
      - dev-network
    command: npm run dev

  # PostgreSQL with initialization scripts
  db:
    image: postgres:14-alpine
    container_name: dev-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=devdb
      - POSTGRES_HOST_AUTH_METHOD=trust  # Dev only!
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend/scripts/seed-db.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - dev-network

  # Redis for caching/sessions
  cache:
    image: redis:7-alpine
    container_name: dev-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --loglevel debug
    volumes:
      - redis-data:/data
    networks:
      - dev-network

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: dev-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=pepa-linha-dark
    depends_on:
      - db
    networks:
      - dev-network

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: dev-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - dev-network

  # Documentation server (optional)
  docs:
    image: nginx:alpine
    container_name: dev-docs
    restart: unless-stopped
    ports:
      - "8090:80"
    volumes:
      - ./docs:/usr/share/nginx/html:ro
    networks:
      - dev-network

# Networks
networks:
  dev-network:
    driver: bridge

# Volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
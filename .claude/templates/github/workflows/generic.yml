# Generic CI/CD Workflow Template
# This is a flexible template that can be adapted for various project types

name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  # Detect project type and set variables
  detect:
    runs-on: ubuntu-latest
    outputs:
      project_type: ${{ steps.detect.outputs.project_type }}
      has_tests: ${{ steps.detect.outputs.has_tests }}
      has_docker: ${{ steps.detect.outputs.has_docker }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Detect project type
      id: detect
      run: |
        if [ -f "package.json" ]; then
          echo "project_type=node" >> $GITHUB_OUTPUT
        elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
          echo "project_type=python" >> $GITHUB_OUTPUT
        elif [ -f "go.mod" ]; then
          echo "project_type=go" >> $GITHUB_OUTPUT
        elif [ -f "Cargo.toml" ]; then
          echo "project_type=rust" >> $GITHUB_OUTPUT
        elif [ -f "pom.xml" ]; then
          echo "project_type=java-maven" >> $GITHUB_OUTPUT
        elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
          echo "project_type=java-gradle" >> $GITHUB_OUTPUT
        else
          echo "project_type=unknown" >> $GITHUB_OUTPUT
        fi
        
        # Check for tests
        if [ -d "tests" ] || [ -d "test" ] || [ -d "spec" ] || grep -q "test" package.json 2>/dev/null; then
          echo "has_tests=true" >> $GITHUB_OUTPUT
        else
          echo "has_tests=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for Docker
        if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then
          echo "has_docker=true" >> $GITHUB_OUTPUT
        else
          echo "has_docker=false" >> $GITHUB_OUTPUT
        fi

  # Quality checks (linting, formatting, etc.)
  quality:
    runs-on: ubuntu-latest
    needs: detect
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Super-Linter
      uses: github/super-linter@v5
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_CHANGED_FILES: true

  # Run tests if they exist
  test:
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.has_tests == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup environment
      run: |
        echo "Setting up environment for ${{ needs.detect.outputs.project_type }}"
        # Add specific setup based on project type
    
    - name: Run tests
      run: |
        case "${{ needs.detect.outputs.project_type }}" in
          "node")
            npm install
            npm test
            ;;
          "python")
            pip install -r requirements.txt
            pytest || python -m pytest || python -m unittest discover
            ;;
          "go")
            go test ./...
            ;;
          "rust")
            cargo test
            ;;
          *)
            echo "No test command found for project type"
            ;;
        esac

  # Build the project
  build:
    runs-on: ubuntu-latest
    needs: [detect, quality, test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build project
      run: |
        case "${{ needs.detect.outputs.project_type }}" in
          "node")
            npm install
            npm run build || echo "No build script found"
            ;;
          "python")
            pip install build
            python -m build || echo "No build needed"
            ;;
          "go")
            go build ./...
            ;;
          "rust")
            cargo build --release
            ;;
          *)
            echo "No build command found for project type"
            ;;
        esac
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          build/
          target/release/
          *.whl
          *.tar.gz

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: detect
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        echo "Running security scan for ${{ needs.detect.outputs.project_type }}"
        # Add specific security tools based on project type

  # Docker build if Dockerfile exists
  docker:
    runs-on: ubuntu-latest
    needs: [detect, build]
    if: needs.detect.outputs.has_docker == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ github.repository }}:${{ github.sha }}

  # Deploy (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy application
      run: |
        echo "Deploying application..."
        # Add your deployment steps here
        # This could include:
        # - Deploying to cloud platforms (AWS, GCP, Azure)
        # - Updating Kubernetes deployments
        # - Pushing to package registries
        # - Triggering webhook notifications